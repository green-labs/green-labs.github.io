{"componentChunkName":"component---src-templates-post-query-tsx-content-file-path-users-hyejin-documents-tech-blog-content-posts-pair-programming-index-mdx","path":"/pair-programming","result":{"data":{"mdx":{"internal":{"content":null,"description":null,"ignoreType":null,"mediaType":null,"contentFilePath":"/Users/hyejin/Documents/tech-blog/content/posts/pair-programming/index.mdx"},"frontmatter":{"slug":"/pair-programming","email":"hyojeongcho1019@gmail.com","tags":["Greenlabs","Pairprogramming","experience"],"title":"그린랩스 프론트엔드 길드의 페어 프로그래밍 문화를 소개합니다 :)","description":"페어 어때요? 그린랩스 프론트엔트 길드에서의 페어 프로그래밍 경험을 공유합니다.","date":"2022년 8월 25일","category":"engineering","author":"조효정"},"body":"\n<Author\n  email=\"hyojeongcho1019@gmail.com\"\n  name=\"조효정\"\n  description=\"팜모닝 프론트엔드 개발자\"\n  date=\"2022-08-25\"\n/>\n\n안녕하세요. 그린랩스 팜모닝 프론트엔드 개발자 조효정입니다.\n\n그린랩스 프론트엔드 개발자로, 페어 프로그래밍을 하며 어떤 것들을 경험하고 느낄 수 있는지 자랑해보겠습니다😎\n\n> 프론트엔드 길드 : 그린랩스에서 소속된 서비스/사업 상관없이 '프론트엔드 직군 전체'를 칭하는 단어입니다.\n\n## 페어 프로그래밍이란?\n\n---\n\n페어 프로그래밍이란 애자일 소프트웨어 개발 중 하나로 하나의 컴퓨터에서 두 명의 개발자 (진행자 driver, 관찰자 navigator) 가 작업하는 방법을 말합니다.\n\n**진행자** 역할의 개발자는 코드를 작성하고, **관찰자** 역할의 개발자는 실시간 코드 리뷰를 하며 구현 방식과 구조에 대해 고민합니다. 두 개발자는 수시로 역할을 바꿉니다.\n\n<br />\n\n#### 페어 프로그래밍을 하는 이유🤔\n\n1. 버그가 적어집니다.\n\n   배경지식이 다른 두 명의 개발자가 다양한 각도에서 문제를 살펴볼 수 있어 최적의 방법을 찾아낼 가능성이 높습니다.\n\n   멀리서 보아야 비로소 보이는 버그 (작고 귀여운 오타에서 구조 문제까지👻)를 실시간 리뷰를 통해 발견하고 빠르게 수정할 수 있습니다.\n\n2. 팀워크가 향상됩니다.\n\n   같은 팀이지만 당장 필요한 질문들 외에 이야기를 나눌 기회가 많지 않고, 재택근무가 활성화되다 보니 더더욱 네트워킹이 쉽지 않습니다.\n\n   페어 프로그래밍을 통해 팀원들과 대화를 나누며 서로 신뢰가 쌓이고 팀워크가 좋아집니다.\n\n<center>\n  <img src=\"https://tenor.com/view/tag-gif-23064747.gif\" />\n</center>\n\n## 그린랩스에서 페어 프로그래밍 하는 법 👨‍🌾 🖥 🧑‍🌾\n\n---\n\n그린랩스 프론트엔드 길드는 소스 코드를 기반으로 문제를 해결하는 비정기 페어 프로그래밍과,\n알고리즘 문제를 함께 해결해보는 정기 페어 프로그래밍의 두 가지 방식으로 페어 프로그래밍을 진행합니다.\n\n비정기적 페어 프로그래밍은 주로 같은 맥락을 공유하고 있는 같은 팀 개발자와 진행하기 때문에, 그린랩스의 다양한 개발자분들을 만나지 못한다는 아쉬움이 있었습니다.\n\n다양한 분들과 페어 프로그래밍을 진행해보고 싶어 알고리즘 문제를 해결하는 정기 페어 프로그래밍을 기획하게 되었고\n이를 통해 **소속된 서비스와 관계없이** 다양한 개발자분들과 **네트워킹**할 수 있었습니다.\n\n<br />\n\n#### Step 1. 📣 페어 파트너 구합니다\n\n페어 프로그래밍을 희망하는 개발자는 페어 파트너를 구해야 합니다. 이때 페어 프로그래밍 종류에 따라 페어 파트너를 구하는 방법이 다릅니다.\n\n- 비정기 페어 프로그래밍\n\n  공개적으로 상황을 공유하고 페어 프로그래밍을 요청합니다.\n  관련 경험이 있는 개발자 또는 페어 주제에 관심있는 개발자가 자발적으로 지원해 요청자의 코드를 살펴봅니다.\n\n  > 더 좋은 코드가 있을 것 같은데 생각이 막혀버린 저...😰\n  >\n  > 슬랙 채널에 상황과 코드를 공유합니다.(HELP...!)\n  >\n  > 00님이 댓글로 관심을 보이는군요? **바로** 페어 프로그래밍을 신청합니다.\n\n  <br />\n\n- 정기 페어 프로그래밍\n\n  매주 화요일, 그린랩스 프론트엔드 개발자가 모두 모이는 기술공유세션에서 이번 주 알고리즘 문제를 공유합니다.\n\n  돌려돌려 돌림판을 돌려 **행운의 페어 파트너**를 선정합니다. 이번주는 어떤분과 함께하게 될까요?\n\n  이번주 행운의 페어 파트너로 선정된 개발자와 일정 조율 후 페어 프로그래밍을 진행합니다.\n\n  ![행운의 돌림판](img1.png)\n\n<br />\n\n#### Step 2. 오늘 페어 프로그래밍 목표는 이것입니다 🧐\n\n진행자 역할의 개발자가 구현해야 할 로직을 설명하고 목표를 정하는 것으로 페어 프로그래밍이 시작됩니다.\n\n원격 근무중이라면 LiveShare와 온라인 화상 회의로, 함께 있는 경우 한 사람의 컴퓨터 화면을 보며 페어 프로그래밍을 진행합니다.\n\n> [Live Share](https://visualstudio.microsoft.com/ko/services/live-share/)란, 실시간 공동 개발을 할 수 있게 도와주는 vscode의 확장 프로그램입니다.\n\n![live share](https://visualstudio.microsoft.com/wp-content/uploads/2018/11/v2-Edit-Comp_FINAL-optimized840.gif)\n\n<br />\n\n#### Step 3. 번갈아가며 코드를 작성합니다 👯\n\n주로 경험이 더 많은 개발자가 관찰자의 역할을 맡는 것으로 시작됩니다.\n\n- 관찰자 역할의 개발자는 문제 해결을 위한 큰 그림을 그리고 진행자에세 방향을 제시합니다.\n\n- 진행자 역할의 개발자는 관찰자의 가이드에 따라 구체적인 코드를 아름답게 표현합니다.\n\n<br />\n\n#### Step 4. **페어로그**를 작성합니다 ✍🏻\n\n페어 프로그래밍을 마치고 나서는 페어로그를 작성합니다.\n\n**페어로그를 쓰는 이유**\n\n- 파트너 개발자의 노하우와 문제 해결 방식을 기록하고 전파할 수 있습니다.\n- 우리는 가끔 비슷한 문제로 힘들어합니다. 미래에 있는 동료가 문제를 해결할 때 도움이 될 수 있습니다.\n  > 프로필 섹션 구현을 위해 고민하던 중 컴포넌트 재사용성 향상을 주제로 한 페어로그를 보았고\n  > 그 내용을 참고해 재사용하기 좋은 프로필 컴포넌트를 작성할 수 있었습니다. 고마워요 페어로그!\n- 페어 로그를 통해 쉽고 빠르게 정보를 찾을 수 있습니다.\n\n페어로그가 지식 전파, 문제 해결 속도를 향상하는 기록의 역할을 하기 때문에 페어 프로그래밍의 과정을 최대한 상세히 기록합니다.\n\n페어 로그에는 다음과 같은 내용을 기록합니다.\n\n- 참여자, 진행 일시, 진행 방법 : 참여자, 날짜와 시간, 그리고 오프라인, 온라인 등의 진행 방식\n- 함께한 작업 : 페어 프로그래밍 주제가 된 알고리즘 문제 또는 기능\n- 이슈 : 페어를 진행하면서 나왔던 질문, 답변\n- 소감 : 각자의 소감\n- 다음 할 일: 액션 아이템 혹은 읽어보면 좋을 참고자료 링크 등\n  ![페어 로그](img2.png)\n\n## 내가 페어 프로그래밍을 통해 얻은 것들\n\n---\n\n🌱 신입시절 적응도 향상\n\n부트캠프 이후 작은 단위의 업무를 페어로 진행하면서 언어와 아키텍쳐에 대한 이해도를 높일 수 있었습니다.\n그 과정에서 프론트엔드 길드의 개발 환경, 개발 스타일 지식을 공유할 수 있었고 빠르게 적응할 수 있었습니다.\n\n<br />\n📒 지식 교환과 성장\n\n길드 내 다양한 개발자분들의 문제 해결 노하우와 통찰을 얻을 수 있었고 실시간으로 피드백을 주고 받으며 선배 개발자의 생각의 흐름을 따라가는 값진 경험을 할 수 있었습니다.\n\n> 주니어의 실력을 향상시킬 수 있는 최고의 기회! 이 부분을 이렇게 해결할 수 있군요! 아이디어가 떠오릅니다!\n\n<br />\n❤️ 팀원과 신뢰 관계 구축\n\n좋은 코드를 만들기 위해 동료 개발자와 많은 대화를 나누었습니다. 자연스럽게 친밀감과 동료에 대한 신뢰가 높아졌습니다.\n이 신뢰를 바탕으로 업무 중에 모르는 부분이 생기면 편하게 질문하고 새로운 방법에 도전할 수 있었습니다.\n\n## 마치며\n\n---\n\n어려움이 있거나 나누고 싶은 코드가 있으면 편하게 외쳐봅니다!\n\n> 페어 어떠세요!\n\n<center>\n  <img src=\"https://tenor.com/view/sponge-bob-im-ready-gif-25548017.gif\" />\n</center>\n","id":"f13162a1-9c05-5a1e-bf85-655b5aace0ae"},"userFilterAllMdx":{"nodes":[]},"dateSortAllMdx":{"nodes":[{"frontmatter":{"title":"리스크립트 컴파일러의 JSX v4를 개발한 여정","date":"2022-10-30T00:00:00.000Z","author":"문운기","category":"engineering","description":"JSX v4을 개발하게 된 과정과 v3 대비 개선된 점을 소개합니다.","slug":"/rescript-compiler-jsx-ppx"},"id":"f154cb27-cd10-58b6-8b1e-d58973d0f411"},{"frontmatter":{"title":"Feature flags 적용 (1)","date":"2022-10-26T00:00:00.000Z","author":"김정우, 양정윤, 이낙원","category":"engineering","description":"Release Toggles 적용","slug":"/feature-flags-1"},"id":"5eacd25c-be7f-5bbb-b53e-8bbb8bc8bcfd"},{"frontmatter":{"title":"함수만으로 지연성까지","date":"2022-07-27T00:00:00.000Z","author":"남영환","category":"engineering","description":"그만 알아보자","slug":"/lazy-sequence-from-scratch"},"id":"adc71c37-e00e-58e7-83dc-df70f5e6331a"},{"frontmatter":{"title":"제목은 그린랩스 1년 후기로 하겠습니다. 근데 이제 클로저를 곁들인","date":"2022-07-21T00:00:00.000Z","author":"차민철","category":"engineering","description":"그린랩스 입사로 클로저를 처음 접해본 백엔드 개발자의 솔직한 후기를 공유합니다.","slug":"/with-greenlabs-for-1yr"},"id":"9ce74193-f3f1-5daf-ac68-4d9b62712ba5"},{"frontmatter":{"title":"클로저(Clojure) 코드는 정말 읽기 어려운가?","date":"2022-06-17T00:00:00.000Z","author":"박연오","category":"engineering","description":"클로저에는 슬픈 전설이 있어. 무슨... 전설인데요?...혹시 코드가 읽기 어렵다는 그 전설인가요? 난 전설같은 건 믿지 않아.","slug":"/is-clojure-hard-to-read"},"id":"cdd0571d-71f3-509e-ad9c-e294c7567d55"},{"frontmatter":{"title":"그린랩스 클로저 사용 실태 조사 2022","date":"2022-01-11T00:00:00.000Z","author":"남현우","category":"engineering","description":"그린랩스의 클로저 사용자를 대상으로 설문조사를 진행했습니다.","slug":"/greenlabs-clojurians-2022"},"id":"503f1b09-b133-5f63-8898-ac5eba7cc0d6"},{"frontmatter":{"title":"클로저 매크로에 대해 알아보자","date":"2021-11-22T00:00:00.000Z","author":"남영환","category":"engineering","description":"그만 알아보자","slug":"/the-macro"},"id":"b6744efa-9cd1-5ad8-9b12-0a38954ffb4b"},{"frontmatter":{"title":"그린랩스에서 리스크립트 시작하기","date":"2021-10-29T00:00:00.000Z","author":"김효은","category":"engineering","description":"프론트엔드 환경에서도 함수형 패러다임으로 개발한다고요? 타입스크립트보다 더 강력한 타입 시스템을 적용했다고요? 그 회사... 제가 살아남을 수 있는 곳인가요? 걱정하지 마세요. 그린랩스에서는 프론트엔드 개발자들이 함수형 프로그래밍에 쉽게 적응할 수 있도록 3주 동안의 부트캠프를 제공합니다! 그린랩스의 부트캠프와 리스크립트 언어에 대해 알아봅시다.","slug":"/rescript-bootcamp"},"id":"68a29bba-1b97-586d-a0de-cb6d67c0927f"},{"frontmatter":{"title":"프로그래머를 위한 이름 짓는 원리","date":"2021-09-24T00:00:00.000Z","author":"박연오","category":"engineering","description":"이름은 정말로 중요할까요? 좋은 이름의 판단 기준은 무엇일까요? <클로저 기본원리>에서 이름 짓는 원리를 알아봅시다.","slug":"/programmers-naming"},"id":"b738b947-e79e-551b-8534-787ebf6e2d9f"},{"frontmatter":{"title":"클로저로 웹 서버 애플리케이션 개발을 시작하는 사람들을 위한 Ring 소개서","date":"2021-09-17T00:00:00.000Z","author":"김동욱","category":"engineering","description":"클로저 문법을 모두 익힌 뒤, 첫걸음으로 웹 개발을 시작하는 분들을 위해 웹 서버 어플리케이션 라이브러리 Ring이 제공하는 여러 도구들을 소개합니다.","slug":"/introduce-a-ring"},"id":"4a637fde-9c6e-5ace-a010-822ca614e883"},{"frontmatter":{"title":"그린랩스에서 클로저 시작하기","date":"2021-09-13T00:00:00.000Z","author":"권정인","category":"engineering","description":"그린랩스에는 입사자를 위한 클로저 부트캠프 과정이 있습니다. 그린랩스의 클로저 부트캠프를 소개하고 경험을 공유합니다.","slug":"/clojure-bootcamp"},"id":"537a368e-3237-58a2-8691-44450d566d52"},{"frontmatter":{"title":"대수적 데이터 타입과 리액트 상태 관리","date":"2021-08-31T00:00:00.000Z","author":"문운기","category":"engineering","description":"대수적 데이터 타입을 이용한 상태관리를 통해 리액트 컴포넌트의 복잡도를 낮추는 방법을 알아봅니다.","slug":"/algebraic-data-type"},"id":"7b8b38cf-4f0b-5c9d-9bc8-da7dc5b7af6c"},{"frontmatter":{"title":"(번역) 클로저, 지금 바로 시작합시다! - 2부","date":"2021-06-01T00:00:00.000Z","author":"김상현","category":"engineering","description":"클로저는 리습(Lisp)의 방언으로, 단순함과 실용성을 모두 갖춘 언어입니다. 2부에서는 클로저의 가능성과 여러 도움이 되는 사이트들을 정리해보았습니다.","slug":"/start-your-clojure-project-now-2"},"id":"4aa716bb-c5ff-57ae-967e-ee9d2faa9456"},{"frontmatter":{"title":"(번역) 클로저, 지금 바로 시작합시다! - 1부","date":"2021-05-30T00:00:00.000Z","author":"김상현","category":"engineering","description":"클로저는 리습(Lisp)의 방언으로, 단순함과 실용성을 모두 갖춘 언어입니다. 1부에서는 클로저의 탄생 배경과, 특징에 대해 알아봅니다.","slug":"/start-your-clojure-project-now-1"},"id":"ee2a79b0-460b-57ad-ad6d-afb831aa3d05"},{"frontmatter":{"title":"함수형 프로그래밍과 중위연산자","date":"2021-04-27T00:00:00.000Z","author":"김춘구","category":"engineering","description":"show me the $","slug":"/apply-and-compose"},"id":"ff29574f-ad14-52ca-9aa2-63deb07b8ebc"},{"frontmatter":{"title":"그린랩스가 ReasonML에서 리스크립트로 바꾸는 이유","date":"2021-01-29T00:00:00.000Z","author":"양성민","category":"engineering","description":"버클스크립트가 리스크립트로 리브랜딩한 배경을 살펴보고 리스크립트 문법과 ReasonML 문법의 차이점을 간단하게 알아봅니다. 마지막으로 이 과정에서 그린랩스는 어떤 선택을 했는지 이야기합니다.","slug":"/why-rescript"},"id":"1242c8cd-8847-51c9-84b3-00e8ac025cc0"},{"frontmatter":{"title":"앗, ReasonML의 분기문에서는 타입이 다른 데이터를 리턴할 수 없다고요?!","date":"2020-12-21T00:00:00.000Z","author":"김상현","category":"engineering","description":"자바스크립트에서는 함수나 분기문에서 타입이 다른 데이터를 리턴할 수 있는데, ReasonML에선 그럴 수 없습니다. 이 문제를 어떻게 해결할 수 있을까요?","slug":"/reasonml-ways-with-types"},"id":"fcd89036-f4c3-53c8-b8b8-cf204e6e2218"},{"frontmatter":{"title":"프론트엔드 개발 ReasonML이라 좋았던 점","date":"2020-12-15T00:00:00.000Z","author":"윤정식","category":"engineering","description":"자바스크립트, 타입스크립트만 사용해본 프론트엔드 개발자가 ReasonML 개발 경험 중 장점을 공유합니다.","slug":"/reason-ml-the-good-parts"},"id":"d2b3e0d3-2d3c-5ddd-9190-a649bd9232d8"},{"frontmatter":{"title":"자바스크립트 개발자를 위한 ReasonML","date":"2020-12-01T00:00:00.000Z","author":"양성민","category":"engineering","description":"ReasonML의 특징과 그런 특징을 가지게 된 역사적 이유에 대해 이야기합니다. 또한 타입스크립트와 어떤 차이점이 있는지 설명합니다.","slug":"/what-is-reason-ml"},"id":"50b95dc8-1681-5633-a035-cabafbe1fb0a"},{"frontmatter":{"title":"ReasonML의 폴리모픽 배리언트 알아보기","date":"2020-12-01T00:00:00.000Z","author":"남현우","category":"engineering","description":"ReasonML의 독특한 기능 중 하나인 폴리모픽 배리언트(Polymorphic Variants). 그 사용법과 동작 원리에 대해 소개합니다.","slug":"/what-is-polymorphic-variants"},"id":"c1f6f719-a083-5eb8-94ec-1f94632ba106"}]},"allMdx":{"edges":[{"node":{"id":"c1b9e090-9ab6-5635-938e-55181ecf3bc2","frontmatter":{"date":"2023-01-02T00:00:00.000Z"}}},{"node":{"id":"23649293-d0ae-5878-809e-e459f2a33862","frontmatter":{"date":"2022-11-28T00:00:00.000Z"}}},{"node":{"id":"a35f56fb-dec5-51dc-8f87-ce415db90df4","frontmatter":{"date":"2022-11-11T00:00:00.000Z"}}},{"node":{"id":"f154cb27-cd10-58b6-8b1e-d58973d0f411","frontmatter":{"date":"2022-10-30T00:00:00.000Z"}}},{"node":{"id":"5eacd25c-be7f-5bbb-b53e-8bbb8bc8bcfd","frontmatter":{"date":"2022-10-26T00:00:00.000Z"}}},{"node":{"id":"f3366c54-e983-5cc1-9ac0-b099ad824dd8","frontmatter":{"date":"2022-10-14T00:00:00.000Z"}}},{"node":{"id":"f13162a1-9c05-5a1e-bf85-655b5aace0ae","frontmatter":{"date":"2022-08-25T00:00:00.000Z"}}},{"node":{"id":"6824dc6c-daa7-5e2b-8b25-283f61471036","frontmatter":{"date":"2022-08-16T00:00:00.000Z"}}},{"node":{"id":"adc71c37-e00e-58e7-83dc-df70f5e6331a","frontmatter":{"date":"2022-07-27T00:00:00.000Z"}}},{"node":{"id":"9ce74193-f3f1-5daf-ac68-4d9b62712ba5","frontmatter":{"date":"2022-07-21T00:00:00.000Z"}}},{"node":{"id":"0cd79f66-41cd-5f02-ac23-99a6b4cfcb3e","frontmatter":{"date":"2022-07-05T00:00:00.000Z"}}},{"node":{"id":"7691ceb5-c5de-5d80-b603-20dc8d12c0c9","frontmatter":{"date":"2022-06-17T00:00:00.000Z"}}},{"node":{"id":"cdd0571d-71f3-509e-ad9c-e294c7567d55","frontmatter":{"date":"2022-06-17T00:00:00.000Z"}}},{"node":{"id":"89bcab3e-450c-57df-88a2-6dfedc86db73","frontmatter":{"date":"2022-04-06T00:00:00.000Z"}}},{"node":{"id":"503f1b09-b133-5f63-8898-ac5eba7cc0d6","frontmatter":{"date":"2022-01-11T00:00:00.000Z"}}},{"node":{"id":"aa5a422f-8945-52b8-8969-9531f433c561","frontmatter":{"date":"2021-12-29T00:00:00.000Z"}}},{"node":{"id":"b6744efa-9cd1-5ad8-9b12-0a38954ffb4b","frontmatter":{"date":"2021-11-22T00:00:00.000Z"}}},{"node":{"id":"68a29bba-1b97-586d-a0de-cb6d67c0927f","frontmatter":{"date":"2021-10-29T00:00:00.000Z"}}},{"node":{"id":"b738b947-e79e-551b-8534-787ebf6e2d9f","frontmatter":{"date":"2021-09-24T00:00:00.000Z"}}},{"node":{"id":"4a637fde-9c6e-5ace-a010-822ca614e883","frontmatter":{"date":"2021-09-17T00:00:00.000Z"}}},{"node":{"id":"537a368e-3237-58a2-8691-44450d566d52","frontmatter":{"date":"2021-09-13T00:00:00.000Z"}}},{"node":{"id":"7b8b38cf-4f0b-5c9d-9bc8-da7dc5b7af6c","frontmatter":{"date":"2021-08-31T00:00:00.000Z"}}},{"node":{"id":"4aa716bb-c5ff-57ae-967e-ee9d2faa9456","frontmatter":{"date":"2021-06-01T00:00:00.000Z"}}},{"node":{"id":"ee2a79b0-460b-57ad-ad6d-afb831aa3d05","frontmatter":{"date":"2021-05-30T00:00:00.000Z"}}},{"node":{"id":"ff29574f-ad14-52ca-9aa2-63deb07b8ebc","frontmatter":{"date":"2021-04-27T00:00:00.000Z"}}},{"node":{"id":"1242c8cd-8847-51c9-84b3-00e8ac025cc0","frontmatter":{"date":"2021-01-29T00:00:00.000Z"}}},{"node":{"id":"fcd89036-f4c3-53c8-b8b8-cf204e6e2218","frontmatter":{"date":"2020-12-21T00:00:00.000Z"}}},{"node":{"id":"d2b3e0d3-2d3c-5ddd-9190-a649bd9232d8","frontmatter":{"date":"2020-12-15T00:00:00.000Z"}}},{"node":{"id":"50b95dc8-1681-5633-a035-cabafbe1fb0a","frontmatter":{"date":"2020-12-01T00:00:00.000Z"}}},{"node":{"id":"c1f6f719-a083-5eb8-94ec-1f94632ba106","frontmatter":{"date":"2020-12-01T00:00:00.000Z"}}}]}},"pageContext":{"slug":"/pair-programming","title":"그린랩스 프론트엔드 길드의 페어 프로그래밍 문화를 소개합니다 :)","category":"engineering","email":"hyojeongcho1019@gmail.com","formatString":"YYYY년 M월 D일","frontmatter":{"title":"그린랩스 프론트엔드 길드의 페어 프로그래밍 문화를 소개합니다 :)","date":"2022-08-25T00:00:00.000Z","description":"페어 어때요? 그린랩스 프론트엔트 길드에서의 페어 프로그래밍 경험을 공유합니다.","author":"조효정","email":"hyojeongcho1019@gmail.com","slug":"/pair-programming","tags":["Greenlabs","Pairprogramming","experience"],"category":"engineering"}}},"staticQueryHashes":["318001574"]}
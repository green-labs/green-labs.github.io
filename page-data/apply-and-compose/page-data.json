{"componentChunkName":"component---src-templates-post-query-tsx-content-file-path-users-namenu-green-tech-blog-content-posts-apply-and-compose-index-mdx","path":"/apply-and-compose","result":{"data":{"mdx":{"internal":{"content":null,"description":null,"ignoreType":null,"mediaType":null,"contentFilePath":"/Users/namenu/green/tech-blog/content/posts/apply-and-compose/index.mdx"},"frontmatter":{"slug":"/apply-and-compose","email":"ck.kim@greenlabs.co.kr","tags":["functional programming","infix operator"],"title":"함수형 프로그래밍과 중위연산자","description":"show me the $","date":"2021년 4월 27일","category":"engineering","author":"김춘구"},"body":"\n함수형 프로그래밍의 목표는 무엇일까요? 여러 가지 의견이 있겠지만 함수의 재사용과 합성이야말로 함수형 프로그래밍의 궁극적인 목표라고 생각합니다. 작은 일을 정확하게 처리하는 함수들을 모으고 합성하면 크고 복잡한 문제를 더욱더 쉽게 해결할 수 있게 됩니다.\n\n하스켈을 비롯한 몇몇 언어들은 인자가 두 개인 함수를 +, \\*와 같은 중위 연산자로 취급 할 수 있습니다. 이 포스팅에서는 중위 연산자를 사용해서 함수의 합성과 적용이 산수 계산처럼 쉽게 표현되는 것을 보이려고 합니다.\n\n## 함수 평가해보기\n\n함수 `fn :: a → b`를 평가하는 것은 어렵지 않습니다. 단지 fn에 값을 적용해 주기만 하면 되기 때문이죠.\n\n```haskell\nfn value\n```\n\n## apply\n\n어떤 함수 하나와 그 함수의 첫 번째 인자를 입력받는 함수를 만들고 apply라는 이름을 붙여줍니다. 이 함수는 타입으로 인해 한 가지 방법으로만 구현이 가능합니다.\n\n```haskell\napply :: forall a b. (a -> b) -> a -> b\napply f x = f x\n```\n\napply 함수의 구현을 ReScript로 작성하면 다음과 같습니다.\n\n```reason\nlet apply = (fn: ('a => 'b), value: 'a): 'b => fn(value)\n```\n\nReScript는 타입 표기를 생략해도 정확한 타입을 추론해줍니다.\n\n```reason\nlet apply = (fn, value) => fn(value)\n```\n\napply 함수에 첫 번째 인자로 임의의 함수를 입력하면 그 함수 자신이 리턴됩니다. `apply fn` 을 평가하면 그대로 `fn`이 되는 것이죠. `apply fn`이 리턴 하는 타입이 `a → b`이기 때문에 이는 당연한 일입니다. 따라서 `apply fn value`는 `fn value`와 완전히 동일한 동작을 하게 됩니다. 이해를 돕고자 `apply fn`일 때의 리턴 타입을 명시적으로 괄호로 묶어보았습니다. (`apply fn`을 평가해서 `fn`이 되는 것은 하스켈과 ReScript 모두 함수가 커링되어있기 때문입니다.)\n\n```haskell\napply :: forall a b. (a -> b) -> (a -> b)\n```\n\napply 함수는 [map](https://hackage.haskell.org/package/base-4.15.0.0/docs/Prelude.html#v:fmap), [ap](https://hackage.haskell.org/package/base-4.15.0.0/docs/Control-Monad.html#v:ap), [flatMap](https://hackage.haskell.org/package/base-4.15.0.0/docs/Prelude.html#v:-61--60--60-) 과 나란히 놓고 보면 그 특징과 연관성이 더욱 두드러집니다. 이런 내용은 다른 포스팅에서 다룰 기회를 가져보도록 하겠습니다.\n\n## compose\n\n두 개의 함수가 있고, 두 함수 중 하나의 리턴 타입이 다른 함수의 인자 자입과 동일하다고 가정해봅시다. 이를 코드로 표현하면 다음과 같습니다.\n\n```haskell\nf :: String -> Int\ng :: Int -> Boolean\n```\n\n함수 f에 대한 평가 결과를 g의 인자로 사용 할 수 있는 것이죠.\n\n```haskell\ng (f x) -- 다른 언어에서는 g(f(x)) 와같이 표현했을 것입니다.\n```\n\napply가 하나의 함수와 하나의 인자를 받았듯이, 두 개의 함수와 하나의 인자를 받아 합성해주는 함수를 만들고 compose 라는 이름을 붙여봅시다.\n\n```haskell\ncompose :: forall a b c. (b -> c) -> (a -> b) -> (a -> c)\n```\n\ncompose의 인자 순서가 `(b → c) → (a → b) → a → c` 인 것에 주의합시다. 인자의 입력부터 연속되는 함수의 평가는 `g (f x)`에서 보듯 오른쪽에서 왼쪽으로 적기 때문에 compose도 이 흐름에 맞춰서 구현하는 게 일반적입니다.\n\ncompose 함수를 사용해서 g (f x)를 표현하면 이렇게 됩니다.\n\n```haskell\ncomposite2Fn :: forall a c. a -> c\ncomposite2Fn x = (compose g f) x -- x는 a타입의 값입니다.\n```\n\n`=`를 기준으로 좌변에 있는 마지막 인자가 우변에서 가장 마지막에 입력이 된다면, 좌우 변에서 모두 생략시킬 수 있습니다. composite2Fn의 인자 x가 우변에 있는 함수에서 가장 끝에서 입력이 되었기 때문에 양쪽에서 모두 생략하고 이렇게 작성을 해도 같은 표현이 됩니다.\n\n```haskell\ncomposite2Fn :: forall a c. a -> c\ncomposite2Fn = compose g f -- compose g f는 여전히 a타입의 인자가 필요합니다.\n```\n\n이렇게 인자를 생략해서 함수 선언을 작성하는 방식을 point-free style이라고 부릅니다. 하스켈에서는 반복을 피하고 간결한 코드 작성을 위해서 자주 사용하는 기법입니다.\n\n`compose g f`를 먼저 평가하면 `a → c`타입의 함수가 됩니다. 이는 다시 말하면 compose 함수가 2개의 함수를 입력받아 순차적으로 실행하는 또 다른 함수를 만들어 낼 수 있다는 것을 의미합니다. `(compose g f) x`와 `g (f x)`가 완전히 같은 동작을 하게 된다는 것을 기억합시다.\n\n만약 `h :: c → d` 라는 함수가 있어 f, g, h를 합성하고 싶다면 어떻게 하면 될까요?\n\n```haskell\ncompose h (compose (g f)) x\n```\n\n같은 방식으로 더 많은 함수를 합성해 나간다면 무수히 많은 괄호가 필요하고 우리의 뇌는 이 괄호를 해석하기 위해 더 많은 일을 해야 할 것입니다. 이것을 단순하게 표현 할 수 있는 방법을 찾아봅시다.\n\n## 함수 풀어서 써보기\n\n첫 번째 인자에서 두 번째 인자를 더하는 함수 plus가 있다고 가정합니다.\n\n```haskell\nplus x y = x + y\n```\n\nplus함수를 사용해서 x,y,z 세 개의 숫자를 순서대로 더해나간다면 이렇게 표시할 수 있습니다.\n\n```haskell\nplus x (plus y z)\n```\n\n이 표현식을 바깥에서부터 안쪽으로 풀어나가면 다음과 같습니다.\n\n```haskell\nx + (plus y z)\nx + (y + z)\nx + y + z -- 더하기는 결합 법칙에 의해서 연산의 순서가 결과에 영향을 주지 않기 때문에 괄호가 생략 가능함을 떠올립시다.\n```\n\n이번에는 i,j,k,l 네 개의 변수를 더해가는 과정을 안쪽에서부터 풀어봅시다.\n\n```haskell\nplus i (plus j (plus k l))\nplus i (plus j (k + l))\nplus i (j + (k + l))\ni + (j + (k + l))\n```\n\n## 함수의 위치\n\n인자가 2개인 함수라면, 사칙 연산의 연산자를 숫자 중간에 적을 수 있듯이 인자가 2개인 함수 호출에 대해서는 함수를 중간에 표시를 할 수 있습니다. 이러한 방식을 infix operation이라고 부릅니다. 하스켈을 포함한 몇몇 언어에서는 함수의 이름을 백틱(`)으로 감싸주면 infix operation으로 사용할 수 있습니다.\n\n```haskell\ni `plus` j `plus` k `plus` l -- i + j + k + l 과 완전히 동일합니다.\n```\n\n또한 + 연산자처럼 함수 이름이 특수문자로만 이루어졌다면 자동으로 infix operator로서 동작합니다. 일반적인 함수를 백틱으로 감싸 infix operator로 사용했듯이, 특수문자 함수명인 infix operator를 괄호로 감싸주면 일반 함수처럼 중간이 아닌 앞에 적을 수 있게 됩니다.\n\n```haskell\n(+) i ((+) j ((+) k l)) -- plus i (plus j (plus k l)) 와 같은 의미입니다.\n```\n\npoint-free style과 이를 합치면 plus 함수를 이렇게 정의 할 수 있습니다.\n\n```haskell\nplus = (+) -- plus x y = (+) x y 의 point-free 표기입니다.\n```\n\ncompose 함수도 infix operation으로 사용할 수 있습니다.\n\n```haskell\n(h `compose` (g `compose` f)) x\n```\n\ncompose 함수의 infix opearator로 `.`을 지정하고 apply에는 `$` 를 지정해봅니다. 특수문자로 이루어진 함수명은 괄호를 써야 일반 함수처럼 다룰 수 있습니다.\n\n```haskell\n($) = apply\n(.) = compose\n```\n\ncompose 함수는 +와 마찬가지로 결합법칙을 만족하기 때문에 연산 순서와 관계없고 따라서 아래와 같은 항등식이 성립합니다. 어떤 자료구조가 이처럼 대수 법칙을 만족한다면 결과를 예측하기 쉬워지므로 논리의 검증이 편해집니다.\n\n```haskell\nh . (g . f) = (h . g) . f = h . g . f\n```\n\n이제 f,g,h함수의 합성은 간단하게 할 수 있습니다.\n\n```haskell\n(h . g . f) x\n```\n\n다른 언어와 마찬가지로 연산자 양옆의 공백은 생략해도 됩니다. apply까지 사용하면 괄호도 필요 없어집니다.\n\n```haskell\nh.g.f $ x\n```\n\n중첩된 괄호의 늪에서 빠져나와 간단명료한 방법으로 함수를 합성할 수 있게 되었습니다.\n\n## 마치며\n\n이번 포스팅에서는 함수를 합성하는 방법과 하스켈에서 이를 간단하게 표현하는 방법에 대해서 살펴보았습니다. 하스켈에서는 infix operator, currying, point-free 표기 등을 사용해서 마치 수식을 다루는 것과 같이 단순하고 명료한 코드를 작성하고 합성해서 복잡한 문제를 해결하는 방식을 선호합니다. 기존 언어에서도 이런 관점으로 코드를 작성하고 리팩토링을 해나간다면 단순하면서도 견고한 코드를 작성하기가 쉬워질 것입니다.\n\n<br />\n<br />\n<Author\n  email=\"ck.kim@greenlabs.co.kr\"\n  name=\"김춘구\"\n  description=\"함수형 프로그래머\"\n  date=\"2021-04-27\"\n/>\n<br />\n<br />\n","id":"2952a571-bd4e-560e-a887-aa6402832b41"},"userFilterAllMdx":{"nodes":[]},"dateSortAllMdx":{"nodes":[{"frontmatter":{"title":"모노레포 - 마이크로 아키텍처를 지향하며","date":"2023-01-16T00:00:00.000Z","author":"최경식","category":"engineering","description":"모노레포에 대해서 들어보셨나요? 프론트엔드에서 마이크로 아키텍처를 지향하려면 어떻게 해야할까요?","slug":"/monorepo-microfrontend"},"id":"7a6ee670-bba5-5f18-baa1-6fcdda49f8c7"},{"frontmatter":{"title":"리스크립트 컴파일러의 JSX v4를 개발한 여정","date":"2022-10-30T00:00:00.000Z","author":"문운기","category":"engineering","description":"JSX v4을 개발하게 된 과정과 v3 대비 개선된 점을 소개합니다.","slug":"/rescript-compiler-jsx-ppx"},"id":"fc5716a7-cb14-5887-bbbc-2868900d4753"},{"frontmatter":{"title":"Feature flags 적용 (1)","date":"2022-10-26T00:00:00.000Z","author":"김정우, 양정윤, 이낙원","category":"engineering","description":"Release Toggles 적용","slug":"/feature-flags-1"},"id":"fbb180f1-e03d-580e-b6b2-72a51db8a3ea"},{"frontmatter":{"title":"그린랩스 프론트엔드 길드의 페어 프로그래밍 문화를 소개합니다 :)","date":"2022-08-25T00:00:00.000Z","author":"조효정","category":"engineering","description":"페어 어때요? 그린랩스 프론트엔트 길드에서의 페어 프로그래밍 경험을 공유합니다.","slug":"/pair-programming"},"id":"31b30552-417d-5cb3-a385-2ba938474bbf"},{"frontmatter":{"title":"함수만으로 지연성까지","date":"2022-07-27T00:00:00.000Z","author":"남영환","category":"engineering","description":"그만 알아보자","slug":"/lazy-sequence-from-scratch"},"id":"ec180bef-ef40-521d-ac6b-9f30abcfef53"},{"frontmatter":{"title":"제목은 그린랩스 1년 후기로 하겠습니다. 근데 이제 클로저를 곁들인","date":"2022-07-21T00:00:00.000Z","author":"차민철","category":"engineering","description":"그린랩스 입사로 클로저를 처음 접해본 백엔드 개발자의 솔직한 후기를 공유합니다.","slug":"/with-greenlabs-for-1yr"},"id":"df129ef4-5001-5c2e-84bf-ee90e41af227"},{"frontmatter":{"title":"클로저(Clojure) 코드는 정말 읽기 어려운가?","date":"2022-06-17T00:00:00.000Z","author":"박연오","category":"engineering","description":"클로저에는 슬픈 전설이 있어. 무슨... 전설인데요?...혹시 코드가 읽기 어렵다는 그 전설인가요? 난 전설같은 건 믿지 않아.","slug":"/is-clojure-hard-to-read"},"id":"7fc5c006-6605-5432-9f94-0789645d355d"},{"frontmatter":{"title":"그린랩스 클로저 사용 실태 조사 2022","date":"2022-01-11T00:00:00.000Z","author":"남현우","category":"engineering","description":"그린랩스의 클로저 사용자를 대상으로 설문조사를 진행했습니다.","slug":"/greenlabs-clojurians-2022"},"id":"98914553-efc2-515a-b2d4-7eba07c0bfc5"},{"frontmatter":{"title":"클로저 매크로에 대해 알아보자","date":"2021-11-22T00:00:00.000Z","author":"남영환","category":"engineering","description":"그만 알아보자","slug":"/the-macro"},"id":"6b9986fe-c5e8-5c79-b3db-31e120ddd392"},{"frontmatter":{"title":"그린랩스에서 리스크립트 시작하기","date":"2021-10-29T00:00:00.000Z","author":"김효은","category":"engineering","description":"프론트엔드 환경에서도 함수형 패러다임으로 개발한다고요? 타입스크립트보다 더 강력한 타입 시스템을 적용했다고요? 그 회사... 제가 살아남을 수 있는 곳인가요? 걱정하지 마세요. 그린랩스에서는 프론트엔드 개발자들이 함수형 프로그래밍에 쉽게 적응할 수 있도록 3주 동안의 부트캠프를 제공합니다! 그린랩스의 부트캠프와 리스크립트 언어에 대해 알아봅시다.","slug":"/rescript-bootcamp"},"id":"748c611f-6eff-5719-abd8-7779f462e6dd"},{"frontmatter":{"title":"프로그래머를 위한 이름 짓는 원리","date":"2021-09-24T00:00:00.000Z","author":"박연오","category":"engineering","description":"이름은 정말로 중요할까요? 좋은 이름의 판단 기준은 무엇일까요? <클로저 기본원리>에서 이름 짓는 원리를 알아봅시다.","slug":"/programmers-naming"},"id":"69bae138-e848-5a0c-a59d-deb23964f885"},{"frontmatter":{"title":"클로저로 웹 서버 애플리케이션 개발을 시작하는 사람들을 위한 Ring 소개서","date":"2021-09-17T00:00:00.000Z","author":"김동욱","category":"engineering","description":"클로저 문법을 모두 익힌 뒤, 첫걸음으로 웹 개발을 시작하는 분들을 위해 웹 서버 어플리케이션 라이브러리 Ring이 제공하는 여러 도구들을 소개합니다.","slug":"/introduce-a-ring"},"id":"d99334fe-3434-552b-8a61-e0eb30248003"},{"frontmatter":{"title":"그린랩스에서 클로저 시작하기","date":"2021-09-13T00:00:00.000Z","author":"권정인","category":"engineering","description":"그린랩스에는 입사자를 위한 클로저 부트캠프 과정이 있습니다. 그린랩스의 클로저 부트캠프를 소개하고 경험을 공유합니다.","slug":"/clojure-bootcamp"},"id":"55c088b8-388b-5217-8021-fb99f880d1e1"},{"frontmatter":{"title":"대수적 데이터 타입과 리액트 상태 관리","date":"2021-08-31T00:00:00.000Z","author":"문운기","category":"engineering","description":"대수적 데이터 타입을 이용한 상태관리를 통해 리액트 컴포넌트의 복잡도를 낮추는 방법을 알아봅니다.","slug":"/algebraic-data-type"},"id":"377d0253-0edd-5b64-b2f5-fd713111de89"},{"frontmatter":{"title":"(번역) 클로저, 지금 바로 시작합시다! - 2부","date":"2021-06-01T00:00:00.000Z","author":"김상현","category":"engineering","description":"클로저는 리습(Lisp)의 방언으로, 단순함과 실용성을 모두 갖춘 언어입니다. 2부에서는 클로저의 가능성과 여러 도움이 되는 사이트들을 정리해보았습니다.","slug":"/start-your-clojure-project-now-2"},"id":"13e3bc56-c56f-514d-be53-6566467c13b4"},{"frontmatter":{"title":"(번역) 클로저, 지금 바로 시작합시다! - 1부","date":"2021-05-30T00:00:00.000Z","author":"김상현","category":"engineering","description":"클로저는 리습(Lisp)의 방언으로, 단순함과 실용성을 모두 갖춘 언어입니다. 1부에서는 클로저의 탄생 배경과, 특징에 대해 알아봅니다.","slug":"/start-your-clojure-project-now-1"},"id":"b9a9d532-8635-5bea-8287-c0c09465bf76"},{"frontmatter":{"title":"그린랩스가 ReasonML에서 리스크립트로 바꾸는 이유","date":"2021-01-29T00:00:00.000Z","author":"양성민","category":"engineering","description":"버클스크립트가 리스크립트로 리브랜딩한 배경을 살펴보고 리스크립트 문법과 ReasonML 문법의 차이점을 간단하게 알아봅니다. 마지막으로 이 과정에서 그린랩스는 어떤 선택을 했는지 이야기합니다.","slug":"/why-rescript"},"id":"6d9760d4-7672-538e-b741-8a30e4c0f115"},{"frontmatter":{"title":"앗, ReasonML의 분기문에서는 타입이 다른 데이터를 리턴할 수 없다고요?!","date":"2020-12-21T00:00:00.000Z","author":"김상현","category":"engineering","description":"자바스크립트에서는 함수나 분기문에서 타입이 다른 데이터를 리턴할 수 있는데, ReasonML에선 그럴 수 없습니다. 이 문제를 어떻게 해결할 수 있을까요?","slug":"/reasonml-ways-with-types"},"id":"127d7aab-cdef-5e35-950d-397bb65e3ae4"},{"frontmatter":{"title":"프론트엔드 개발 ReasonML이라 좋았던 점","date":"2020-12-15T00:00:00.000Z","author":"윤정식","category":"engineering","description":"자바스크립트, 타입스크립트만 사용해본 프론트엔드 개발자가 ReasonML 개발 경험 중 장점을 공유합니다.","slug":"/reason-ml-the-good-parts"},"id":"0d135879-f937-5410-9f1f-8ee2ec32e3e0"},{"frontmatter":{"title":"자바스크립트 개발자를 위한 ReasonML","date":"2020-12-01T00:00:00.000Z","author":"양성민","category":"engineering","description":"ReasonML의 특징과 그런 특징을 가지게 된 역사적 이유에 대해 이야기합니다. 또한 타입스크립트와 어떤 차이점이 있는지 설명합니다.","slug":"/what-is-reason-ml"},"id":"8235f87d-16a5-58aa-b28d-887a3ece02f4"},{"frontmatter":{"title":"ReasonML의 폴리모픽 배리언트 알아보기","date":"2020-12-01T00:00:00.000Z","author":"남현우","category":"engineering","description":"ReasonML의 독특한 기능 중 하나인 폴리모픽 배리언트(Polymorphic Variants). 그 사용법과 동작 원리에 대해 소개합니다.","slug":"/what-is-polymorphic-variants"},"id":"7a028bb2-5044-59b8-bf6b-27ffdef4bdf0"}]},"allMdx":{"edges":[{"node":{"id":"7a6ee670-bba5-5f18-baa1-6fcdda49f8c7","frontmatter":{"date":"2023-01-16T00:00:00.000Z"}}},{"node":{"id":"e552c767-7d9e-52bd-9d3e-4c6ca527e24a","frontmatter":{"date":"2023-01-02T00:00:00.000Z"}}},{"node":{"id":"288568ed-1bb5-50c9-bae2-7c544f7dd4b3","frontmatter":{"date":"2022-11-28T00:00:00.000Z"}}},{"node":{"id":"c3a9d0c7-d9c1-503a-97bb-06217c70b470","frontmatter":{"date":"2022-11-11T00:00:00.000Z"}}},{"node":{"id":"fc5716a7-cb14-5887-bbbc-2868900d4753","frontmatter":{"date":"2022-10-30T00:00:00.000Z"}}},{"node":{"id":"fbb180f1-e03d-580e-b6b2-72a51db8a3ea","frontmatter":{"date":"2022-10-26T00:00:00.000Z"}}},{"node":{"id":"e17bb8a2-8b48-5bb2-8c7d-47c8ec7e1aec","frontmatter":{"date":"2022-10-14T00:00:00.000Z"}}},{"node":{"id":"31b30552-417d-5cb3-a385-2ba938474bbf","frontmatter":{"date":"2022-08-25T00:00:00.000Z"}}},{"node":{"id":"4060e5a3-6533-50ce-b421-7a109c3c55c4","frontmatter":{"date":"2022-08-16T00:00:00.000Z"}}},{"node":{"id":"ec180bef-ef40-521d-ac6b-9f30abcfef53","frontmatter":{"date":"2022-07-27T00:00:00.000Z"}}},{"node":{"id":"df129ef4-5001-5c2e-84bf-ee90e41af227","frontmatter":{"date":"2022-07-21T00:00:00.000Z"}}},{"node":{"id":"64529c38-681b-553c-9538-f1be3fb41416","frontmatter":{"date":"2022-07-05T00:00:00.000Z"}}},{"node":{"id":"8a93582a-1654-5408-adb1-2547cb585a28","frontmatter":{"date":"2022-06-17T00:00:00.000Z"}}},{"node":{"id":"7fc5c006-6605-5432-9f94-0789645d355d","frontmatter":{"date":"2022-06-17T00:00:00.000Z"}}},{"node":{"id":"1c549fa1-f8d2-59be-98a9-7277f4e2367e","frontmatter":{"date":"2022-04-06T00:00:00.000Z"}}},{"node":{"id":"98914553-efc2-515a-b2d4-7eba07c0bfc5","frontmatter":{"date":"2022-01-11T00:00:00.000Z"}}},{"node":{"id":"26fe963e-c04c-59cd-af74-b2e510987154","frontmatter":{"date":"2021-12-29T00:00:00.000Z"}}},{"node":{"id":"6b9986fe-c5e8-5c79-b3db-31e120ddd392","frontmatter":{"date":"2021-11-22T00:00:00.000Z"}}},{"node":{"id":"748c611f-6eff-5719-abd8-7779f462e6dd","frontmatter":{"date":"2021-10-29T00:00:00.000Z"}}},{"node":{"id":"69bae138-e848-5a0c-a59d-deb23964f885","frontmatter":{"date":"2021-09-24T00:00:00.000Z"}}},{"node":{"id":"d99334fe-3434-552b-8a61-e0eb30248003","frontmatter":{"date":"2021-09-17T00:00:00.000Z"}}},{"node":{"id":"55c088b8-388b-5217-8021-fb99f880d1e1","frontmatter":{"date":"2021-09-13T00:00:00.000Z"}}},{"node":{"id":"377d0253-0edd-5b64-b2f5-fd713111de89","frontmatter":{"date":"2021-08-31T00:00:00.000Z"}}},{"node":{"id":"13e3bc56-c56f-514d-be53-6566467c13b4","frontmatter":{"date":"2021-06-01T00:00:00.000Z"}}},{"node":{"id":"b9a9d532-8635-5bea-8287-c0c09465bf76","frontmatter":{"date":"2021-05-30T00:00:00.000Z"}}},{"node":{"id":"2952a571-bd4e-560e-a887-aa6402832b41","frontmatter":{"date":"2021-04-27T00:00:00.000Z"}}},{"node":{"id":"6d9760d4-7672-538e-b741-8a30e4c0f115","frontmatter":{"date":"2021-01-29T00:00:00.000Z"}}},{"node":{"id":"127d7aab-cdef-5e35-950d-397bb65e3ae4","frontmatter":{"date":"2020-12-21T00:00:00.000Z"}}},{"node":{"id":"0d135879-f937-5410-9f1f-8ee2ec32e3e0","frontmatter":{"date":"2020-12-15T00:00:00.000Z"}}},{"node":{"id":"8235f87d-16a5-58aa-b28d-887a3ece02f4","frontmatter":{"date":"2020-12-01T00:00:00.000Z"}}},{"node":{"id":"7a028bb2-5044-59b8-bf6b-27ffdef4bdf0","frontmatter":{"date":"2020-12-01T00:00:00.000Z"}}}]}},"pageContext":{"slug":"/apply-and-compose","title":"함수형 프로그래밍과 중위연산자","category":"engineering","email":"ck.kim@greenlabs.co.kr","formatString":"YYYY년 M월 D일","frontmatter":{"title":"함수형 프로그래밍과 중위연산자","date":"2021-04-27T00:00:00.000Z","description":"show me the $","slug":"/apply-and-compose","tags":["functional programming","infix operator"],"author":"김춘구","email":"ck.kim@greenlabs.co.kr","category":"engineering"}}},"staticQueryHashes":["318001574"]}
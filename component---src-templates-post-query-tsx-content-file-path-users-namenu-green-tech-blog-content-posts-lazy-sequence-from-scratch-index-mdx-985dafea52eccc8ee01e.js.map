{"version":3,"file":"component---src-templates-post-query-tsx-content-file-path-users-namenu-green-tech-blog-content-posts-lazy-sequence-from-scratch-index-mdx-985dafea52eccc8ee01e.js","mappings":"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","sources":["webpack://my/./content/posts/lazy-sequence-from-scratch/index.mdx","webpack://my/./src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    pre: \"pre\",\n    ol: \"ol\",\n    li: \"li\",\n    ul: \"ul\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"소개\"), \"\\n\", React.createElement(_components.p, null, \"제가 함수형 프로그래밍으로 개발한다고 말하면, 때때로 저에게 함수만으로 무엇을 할 수 있는지 물어보는 분들이 있습니다.\\n저는 그분들에게 무엇이든 할 수 있다고 답합니다. 하지만 이 말로는 부족할 때가 많습니다.\\n오늘은 그 질문에 대한 저만의 답변이 될 만한 이야기들을 간단하게 적어보려고 합니다.\"), \"\\n\", React.createElement(_components.h2, null, \"자연수 만들기\"), \"\\n\", React.createElement(_components.p, null, \"함수만으로 우리는 자연수를 표현할 수 있습니다.\\n저는 처치 인코딩(Church numerals)을 이용하려고 합니다. 자세한 설명은 다음 링크를 참고해주시기 바랍니다. \", React.createElement(_components.a, {\n    href: \"#ref-1\"\n  }, \"[1]\"), React.createElement(_components.a, {\n    href: \"#ref-5\"\n  }, \"[5]\"), \"\\n개발자는 코드로 말하므로 이론적인 설명은 치우고 곧바로 코드를 만들도록 하겠습니다.\"), \"\\n\", React.createElement(_components.p, null, \"숫자 0, 1, 2, 3 만들어 보겠습니다. 숫자의 크기는 함수\", React.createElement(_components.code, null, \"f\"), \"가 얼마나 감싸고 있느냐로 표현합니다.\\n언어는 자바스크립트를 사용합니다.\", React.createElement(_components.a, {\n    href: \"#ref-4\"\n  }, \"[4]\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"var zero = (f) => (x) => x;\\nvar one = (f) => (x) => f(x);\\nvar two = (f) => (x) => f(f(x));\\nvar three = (f) => (x) => f(f(f(x)));\\n\")), \"\\n\", React.createElement(_components.p, null, \"다음 수, 더하기, 곱하기 함수를 만들어보겠습니다. (빼기, 나누기, 지수 등 추가적으로 관심이 있으시다면 \", React.createElement(_components.a, {\n    href: \"#ref-5\"\n  }, \"[5]\"), \"를 참고해주세요)\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"// f를 1개 추가합니다.\\nvar SUCC = (n) => (f) => (x) => f(n(f)(x));\\n// f를 n개 추가합니다.\\nvar PLUS = (m) => (n) => m(SUCC)(n);\\nvar MULT = (m) => (n) => m(PLUS(n))(zero);\\n\")), \"\\n\", React.createElement(_components.p, null, \"하지만 람다표현식이 정말로 제대로 동작하는지 확인하기는 쉽지 않습니다. 모두 함수로 감싸져있기 때문입니다.\\n임의로 출력하는 함수는 만들어보았습니다. 함수로 문자를 표현하는 것은 생각하겠습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"var printNumber = (f) => f((n) => n + '+1')('0');\\n\")), \"\\n\", React.createElement(_components.p, null, \"실제로 출력을 해보겠습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"console.log(printNumber(zero)); // 0\\nconsole.log(printNumber(one)); // 0+1\\nconsole.log(printNumber(two)); // 0+1+1\\nconsole.log(printNumber(three)); // 0+1+1+1\\n\")), \"\\n\", React.createElement(_components.p, null, \"계승, 더하기, 곱하기는 잘 작동하는지 보겠습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"console.log(printNumber(SUCC(three))); // 0+1+1+1+1\\nconsole.log(printNumber(MULT(two(one)))); // 0+1+1\\nconsole.log(printNumber(MULT(two)(three))); // 0+1+1+1+1+1+1\\n\")), \"\\n\", React.createElement(_components.h2, null, \"함수로 만드는 자료구조\"), \"\\n\", React.createElement(_components.p, null, \"우리는 자료구조 중에 두 개의 요소를 저장할 수 있는 \", React.createElement(_components.code, null, \"pair\"), \"를 만들어 볼 것입니다.\\n이제부터 숫자는 자바스크립트 타입을 그대로 사용하겠습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"var pair = (a) => (b) => (f) => f(a)(b);\\nvar first = (a) => (b) => a;\\nvar second = (a) => (b) => b;\\n\\npair(1)(2)(first); // 1\\npair(1)(2)(second); // 2\\n\")), \"\\n\", React.createElement(_components.p, null, \"이렇게 구현한 pair를 이용하여 우리는 N개의 요소를 나열하는 자료구조를 만들 수 있습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"pair(1)(pair(2)(3))(first); // 1\\npair(1)(pair(2)(3))(second)(first); // 2\\n\")), \"\\n\", React.createElement(_components.h2, null, \"함수로 만드는 조건절\"), \"\\n\", React.createElement(_components.p, null, \"조건절을 만드려면 참과 거짓이 있어야합니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"var TRUE = (a) => (b) => a;\\nvar FALSE = (a) => (b) => b;\\n\")), \"\\n\", React.createElement(_components.p, null, \"이 함수가 참과 거짓을 잘 나타내는지 확인해보기위해 \", React.createElement(_components.code, null, \"AND\"), \", \", React.createElement(_components.code, null, \"OR\"), \" 를 만들어보겠습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"var AND = (a) => (b) => a(b)(FALSE);\\nvar OR = (a) => (b) => a(TRUE)(b);\\n\")), \"\\n\", React.createElement(_components.p, null, \"진리표에 부합하는 값이 나오는지 테스트해보겠습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"AND(TRUE)(TRUE); // [Function: TRUE]\\nAND(TRUE)(FALSE); // [Function: FALSE]\\nAND(FALSE)(TRUE); // [Function: FALSE]\\nAND(FALSE)(FALSE); // [Function: FALSE]\\n\\nOR(TRUE)(TRUE); // [Function: TRUE]\\nOR(TRUE)(FALSE); // [Function: TRUE]\\nOR(FALSE)(TRUE); // [Function: TRUE]\\nOR(FALSE)(FALSE); // [Function: FALSE]\\n\")), \"\\n\", React.createElement(_components.p, null, \"조건절은 아래처럼 만들 수 있습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"var COND = (p) => (a) => (b) => p(a)(b);\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"TRUE\"), \", \", React.createElement(_components.code, null, \"FALSE\"), \" 가 잘 작동하는지 보겠습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"COND(TRUE)(1)(2); // 1\\nCOND(FALSE)(1)(2); // 2\\n\")), \"\\n\", React.createElement(_components.p, null, \"실제로 사용을 하려면 \", React.createElement(_components.code, null, \"TRUE\"), \", \", React.createElement(_components.code, null, \"FALSE\"), \" 람다를 리턴하는 함수가 필요합니다.\\n위에서 생성한 숫자를 테스트하는 \", React.createElement(_components.code, null, \"ISZERO\"), \" 를 만들어 보겠습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"var ISZERO = (f) => f((a) => FALSE)(TRUE);\\nISZERO(zero); // [Function: TRUE]\\nISZERO(one); // [Function: FALSE]\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"COND\"), \" 에 대입하면 작동하는 것을 볼 수 있습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"COND(ISZERO(zero))(10)(20); // 10\\nCOND(ISZERO(one))(10)(20); // 20\\n\")), \"\\n\", React.createElement(_components.h2, null, \"함수로 만드는 반복문\"), \"\\n\", React.createElement(_components.p, null, \"함수로 반복문을 만들 때는 재귀를 이용합니다.\\n하지만 만약 이름이 없는 익명함수(람다)인 경우는 어떻게 할 수 있을까요?\"), \"\\n\", React.createElement(_components.p, null, \"오로지 익명함수만으로 재귀를 호출할 수 있는 '와이콤비네이터'라는 것이 있습니다.\\n이것은 일전에 제가 블로그로 소개하는 것이 있으니 그것을 참고해주시면 감사하겠습니다. \", React.createElement(_components.a, {\n    href: \"#ref-2\"\n  }, \"[2]\")), \"\\n\", React.createElement(_components.h2, null, \"함수로 만드는 지연성\"), \"\\n\", React.createElement(_components.p, null, \"대부분의 프로그래밍 언어는 함수가 실행되기 전에 인자를 먼저 평가합니다. \", React.createElement(_components.a, {\n    href: \"#ref-3\"\n  }, \"[3]\"), \"\\n아래 코드에서 우리는 \", React.createElement(_components.code, null, \"1 + 1\"), \" 표현식의 평가를 지연시켜야 합니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"someFunction(1 + 1);\\n\")), \"\\n\", React.createElement(_components.p, null, \"그러기 위해서 우리는 함수로 감싸서 평가를 지연시킬 것입니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"var delayedTwo = () => 1 + 1;\\n\")), \"\\n\", React.createElement(_components.p, null, \"다시 실행하려면 인자가 없이 함수를 실행시키면 됩니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"delayedTwo();\\n2;\\n\")), \"\\n\", React.createElement(_components.p, null, \"이제 우리는 아주 쉽게 평가가 지연된 배열을 만들 수 있습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"// 가독성을 위해 인자 2개를 한번에 받도록 하였습니다.\\nvar l = pair(1)(() => 2);\\nl(second)();\\n\")), \"\\n\", React.createElement(_components.p, null, \"하지만 중간중간마다 \", React.createElement(_components.code, null, \"()\"), \" 을 이용하여 지연(delay)된 값을 강제로 평가해서 가져와야 합니다.\\n우리는 이것을 \", React.createElement(_components.code, null, \"force\"), \"라는 함수로 대신하도록 할 것입니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"var force = (a) => a();\\n\")), \"\\n\", React.createElement(_components.p, null, \"이제 \", React.createElement(_components.code, null, \"second\"), \"의 경우 수행될 때마다 한번은 강제로 평가를 수행하는 \", React.createElement(_components.code, null, \"force\"), \"를 추가로 수행해야 합니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"var force = (a) => a();\\nvar secondForce = (a) => (b) => b(force);\\n\")), \"\\n\", React.createElement(_components.p, null, \"이제 다음처럼 호출할 수 있습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"l(secondForce);\\n2;\\n\")), \"\\n\", React.createElement(_components.p, null, \"우리는 이제 특정 범위의 숫자를 지연된 리스트로 만들어낼 수 있습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"var range = (start) => (end) => {\\n  if (start > end) {\\n    return null;\\n  } else {\\n    return pair(start)(() => range(start + 1)(end));\\n  }\\n};\\n\")), \"\\n\", React.createElement(_components.p, null, \"테스트를 해보겠습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"var a = range(1)(3);\\na(first); // 1\\na(secondForce)(first); // 2\\na(secondForce)(secondForce)(first); // 3\\n\")), \"\\n\", React.createElement(_components.p, null, \"테스트하기 위해 좀 지연된 리스트를 모두 리턴하는 함수를 만들어 보겠습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"var printAll = (list) => {\\n  while (list != null) {\\n    console.log(list(first));\\n    list = list(secondForce);\\n  }\\n};\\n\\nprintAll(range(1)(10));\\n\")), \"\\n\", React.createElement(_components.p, null, \"무한으로 반복하는 \", React.createElement(_components.code, null, \"repeat\"), \"이라는 함수도 만들 수 있습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"var repeat = (n) => pair(n)(() => repeat(n));\\n\\nvar ones = repeat(1);\\nones(first); // 1\\nones(secondForce)(first); // 1\\nones(secondForce)(secondForce)(first); // 1\\n// printAll() // 브라우저가 멈출 수 있습니다.\\n\")), \"\\n\", React.createElement(_components.p, null, \"우린 방금 무한으로 만들어지는 자료구조를 생성하였습니다.\\n이제 \", React.createElement(_components.code, null, \"take\"), \"라는 함수를 이용해서 무한 자료구조에서 N개만을 가져올 수 있도록 해볼 것입니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"var take = (n) => (list) => {\\n  if (n <= 0) return null;\\n  return pair(list(first))(() => take(n - 1)(list(secondForce)));\\n};\\n\\nprintAll(take(100)(repeat(1))); // 1이 100번 출력됩니다.\\nprintAll(take(1)(range(1)(10000000000000000000000000000000000))); // 1\\n\")), \"\\n\", React.createElement(_components.p, null, \"아래는 지금까지 소개한 코드를 모두 모아놓은 것입니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"var zero = (f) => (x) => x;\\nvar one = (f) => (x) => f(x);\\nvar two = (f) => (x) => f(f(x));\\nvar three = (f) => (x) => f(f(f(x)));\\n\\nvar SUCC = (n) => (f) => (x) => f(n(f)(x));\\nvar PLUS = (m) => (n) => m(SUCC)(n);\\nvar MULT = (m) => (n) => m(PLUS(n))(zero);\\n\\nvar printNumber = (f) => f((n) => n + '+1')('0');\\n\\nvar pair = (a) => (b) => (f) => f(a)(b);\\nvar first = (a) => (b) => a;\\nvar second = (a) => (b) => b;\\n\\nvar TRUE = (a) => (b) => a;\\nvar FALSE = (a) => (b) => b;\\n\\nvar AND = (a) => (b) => a(b)(FALSE);\\nvar OR = (a) => (b) => a(TRUE)(b);\\n\\nvar COND = (p) => (a) => (b) => p(a)(b);\\n\\nvar ISZERO = (f) => f((a) => FALSE)(TRUE);\\n\\nvar force = (a) => a();\\nvar secondForce = (a) => (b) => b(force);\\n\\nvar range = (start) => (end) => {\\n  if (start > end) {\\n    return null;\\n  } else {\\n    return pair(start)(() => range(start + 1)(end));\\n  }\\n};\\n\\nvar repeat = (n) => pair(n)(() => repeat(n));\\n\\nvar take = (n) => (list) => {\\n  if (n <= 0) return null;\\n  return pair(list(first))(() => take(n - 1)(list(secondForce)));\\n};\\n\\nvar printAll = (list) => {\\n  while (list != null) {\\n    console.log(list(first));\\n    list = list(secondForce);\\n  }\\n};\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Clojure Macro로 Javascript의 한계를 넘어보기\"), \"\\n\", React.createElement(_components.p, null, \"이번장은 람다표현식에 대한 장이 아닙니다. 함수를 넘어서 매크로를 설명하는 번외편입니다.\"), \"\\n\", React.createElement(_components.p, null, \"우리는 지금까지 자바스크립트를 사용하여 함수의 강력함을 알아보았습니다.\\n자바스크립트의 함수는 가능한 모든 것을 만들기에 충분합니다.\\n하지만 저에게는 한 가지 아쉬운 점이 남아있습니다.\"), \"\\n\", React.createElement(_components.p, null, \"바로 지연하기 위한 코드를 함수로 만들 수 없다는 점입니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"var delay = (a) => () => a;\\n\")), \"\\n\", React.createElement(_components.p, null, \"이 코드는 지연이 되는 것 같지만 우리가 원하는 대로 수행되지 않습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"delay(console.log('지연되지 않는다'));\\n\")), \"\\n\", React.createElement(_components.p, null, \"왜냐하면 \", React.createElement(_components.code, null, \"delay\"), \" 가 수행되기 전에 인자가 먼저 평가되기 때문입니다. \", React.createElement(_components.a, {\n    href: \"#ref-3\"\n  }, \"[3]\"), \"\\n우리는 아래처럼 직접 익명함수로 감싸줘야합니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"// 이렇게 말이지요\\n() => console.log('지연되었습니다.');\\n\")), \"\\n\", React.createElement(_components.p, null, \"하지만 지연성이 필요할 때마다 \", React.createElement(_components.code, null, \"() =>\"), \" 를 직접 넣고 싶지는 않습니다.\\n저는 코드가 좀 더 가독성 있고 자연스러웠으면 좋겠습니다.\\n저는 이름을 붙이고 싶습니다.\"), \"\\n\", React.createElement(_components.p, null, \"우리는 자바스크립트로 이것을 해결하기 위해 \", React.createElement(_components.code, null, \"eval\"), \", \", React.createElement(_components.code, null, \"new Function\"), \"을 이용한다면 코드를 문자열로 변경해야 할 것입니다.\\n혹은 바벨이나 직접 트랜스파일링을 할 수도 있겠죠. 그렇다면 일이 엄청나게 커질 것입니다.\"), \"\\n\", React.createElement(_components.p, null, \"하지만 이번에는 그린랩스에서 사용하는 Clojure코드를 이용하여 \", React.createElement(_components.code, null, \"delay\"), \"가 얼마나 쉽게 생성되는지 소개하겠습니다.\\n우리는 \", React.createElement(_components.code, null, \"delay\"), \"라는 매크로를 사용하여 아래 코드를 지연시킬 것입니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-clojure\"\n  }, \"(delay (println \\\"지연이 되어야 합니다.\\\"))\\n\")), \"\\n\", React.createElement(_components.p, null, \"생성된 코드는 다음과 같습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-clojure\"\n  }, \"(defmacro delay [expr]\\n  `(fn [] ~expr))\\n\\n(def delayed-print (delay (println \\\"지연되어야 합니다.\\\"))) ;; 이곳에서는 아무것도 출력되지 않습니다.\\n(delayed-print)  ;; \\\"지연되어야 합니다.\\\" 가 출력됩니다.\\n\")), \"\\n\", React.createElement(_components.p, null, \"Clojure의 매크로는 아주 자연스럽게 언어를 확장합니다. 원래 그랬던 것처럼요.\"), \"\\n\", React.createElement(_components.p, null, \"감사합니다.\"), \"\\n\", React.createElement(_components.h2, null, \"참고문헌\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"lambda calculus에 대한 개요\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"[1] : \", React.createElement(_components.a, {\n    href: \"https://helloworld.kurly.com/blog/lambda-calculus-1/\"\n  }, \"Lambda Calculus에 대해 알아보자\"), \" \", React.createElement(\"a\", {\n    name: \"ref-1\"\n  })), \"\\n\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"2\"\n  }, \"\\n\", React.createElement(_components.li, null, \"Y-Combinator\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"[2] : \", React.createElement(_components.a, {\n    href: \"https://helloworld.kurly.com/blog/y-combinator/\"\n  }, \"https://helloworld.kurly.com/blog/y-combinator/\"), \" \", React.createElement(\"a\", {\n    name: \"ref-2\"\n  })), \"\\n\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"3\"\n  }, \"\\n\", React.createElement(_components.li, null, \"applicative order eveluation\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"[3] : \", React.createElement(_components.a, {\n    href: \"https://en.wikipedia.org/wiki/Evaluation_strategy\"\n  }, \"언어의 평가 순서\"), \" \", React.createElement(\"a\", {\n    name: \"ref-3\"\n  })), \"\\n\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"4\"\n  }, \"\\n\", React.createElement(_components.li, null, \"설명하는 언어로 자바스크립트를 사용한 이유\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"[4] : \", React.createElement(_components.a, {\n    href: \"https://www.crockford.com/javascript/javascript.html\"\n  }, \"https://www.crockford.com/javascript/javascript.html\"), \" \", React.createElement(\"a\", {\n    name: \"ref-4\"\n  })), \"\\n\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"5\"\n  }, \"\\n\", React.createElement(_components.li, null, \"처치 인코딩\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"[5] : \", React.createElement(_components.a, {\n    href: \"https://en.wikipedia.org/wiki/Church_encoding\"\n  }, \"https://en.wikipedia.org/wiki/Church_encoding\"), \" \", React.createElement(\"a\", {\n    name: \"ref-5\"\n  })), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/Users/namenu/green/tech-blog/content/posts/lazy-sequence-from-scratch/index.mdx\";\nimport PostComponent from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nvar query = \"2231403947\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","a","code","pre","ol","li","ul","_provideComponents","components","React","href","className","name","start","MDXLayout","wrapper","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}
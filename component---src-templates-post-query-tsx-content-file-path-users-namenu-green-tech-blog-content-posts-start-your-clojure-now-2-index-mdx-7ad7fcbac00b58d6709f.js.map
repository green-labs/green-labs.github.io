{"version":3,"file":"component---src-templates-post-query-tsx-content-file-path-users-namenu-green-tech-blog-content-posts-start-your-clojure-now-2-index-mdx-7ad7fcbac00b58d6709f.js","mappings":"kKAGA,SAASA,EAAkBC,GACnB,IAAAC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,EAAG,IACHC,GAAI,KACJC,GAAI,KACJC,IAAK,MACLC,KAAM,OACNC,OAAQ,SACRC,GAAI,KACJC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,MAAsBd,EAAMe,YAAcC,EAAUf,EAAVe,OAE7C,OADKA,GAyEP,SAA8BC,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,CA3EeG,CAAqB,UAAU,GACrCC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBpB,EAAYG,EAAG,KAAMiB,EAAAA,cAAoBpB,EAAYI,EAAG,CAC3HiB,KAAM,+DACL,OAAQ,aAAc,KAAMD,EAAAA,cAAoBpB,EAAYK,GAAI,KAAM,iBAAkB,KAAMe,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,WAAYiB,EAAAA,cAAoBpB,EAAYI,EAAG,CACvLiB,KAAM,oDACL,KAAM,MAAOD,EAAAA,cAAoBpB,EAAYI,EAAG,CACjDiB,KAAM,uDACL,UAAW,4BAA6BD,EAAAA,cAAoBpB,EAAYI,EAAG,CAC5EiB,KAAM,wCACL,YAAa,KAAMD,EAAAA,cAAoBpB,EAAYI,EAAG,CACvDiB,KAAM,8BACL,WAAY,sBAAuB,KAAMD,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,6EAA8E,KAAMiB,EAAAA,cAAoBpB,EAAYM,GAAI,KAAM,sCAAuC,KAAMc,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,gFAAiFiB,EAAAA,cAAoBpB,EAAYI,EAAG,CAC3ZiB,KAAM,4CACL,YAAa,aAAc,KAAMD,EAAAA,cAAoBpB,EAAYO,IAAK,KAAMa,EAAAA,cAAoBpB,EAAYQ,KAAM,CACnHc,UAAW,oBACV,sEAAyE,KAAMF,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,kDAAmD,KAAMiB,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,4BAA6BiB,EAAAA,cAAoBpB,EAAYI,EAAG,CAC3RiB,KAAM,8BACL,aAAc,kFAAmF,KAAMD,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,4FAA6F,KAAMiB,EAAAA,cAAoBpB,EAAYO,IAAK,KAAMa,EAAAA,cAAoBpB,EAAYQ,KAAM,CACrUc,UAAW,oBACV,mDAAoD,KAAMF,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,OAAQiB,EAAAA,cAAoBpB,EAAYI,EAAG,CAC/IiB,KAAM,kFACL,0BAA2B,6DAA8D,KAAMD,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,sJAAuJ,KAAMiB,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,wGAAyG,KAAMiB,EAAAA,cAAoBpB,EAAYG,EAAG,KAAMiB,EAAAA,cAAoBpB,EAAYI,EAAG,CAC1gBiB,KAAM,gEACL,qBAAsB,aAAcD,EAAAA,cAAoBpB,EAAYS,OAAQ,KAAM,6CAA8C,+BAAgC,KAAMW,EAAAA,cAAoBpB,EAAYU,GAAI,KAAM,KAAMU,EAAAA,cAAoBpB,EAAYW,GAAI,KAAM,oDAAqD,KAAMS,EAAAA,cAAoBpB,EAAYW,GAAI,KAAM,6BAA8B,MAAO,KAAMS,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,8BAA+BiB,EAAAA,cAAoBpB,EAAYI,EAAG,CAC5fiB,KAAM,2CACL,cAAe,aAAc,KAAMD,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,wHAAyH,KAAMiB,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,sJAAuJ,KAAMiB,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,oDAAqDiB,EAAAA,cAAoBpB,EAAYI,EAAG,CACnhBiB,KAAM,uEACL,MAAO,+GAAgH,KAAMD,EAAAA,cAAoBpB,EAAYM,GAAI,KAAM,eAAgB,KAAMc,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,6DAA8D,KAAMiB,EAAAA,cAAoBpB,EAAYG,EAAG,KAAMiB,EAAAA,cAAoBpB,EAAYI,EAAG,CACvXiB,KAAM,8BACL,WAAY,KAAMD,EAAAA,cAAoBpB,EAAYS,OAAQ,KAAM,gCAAiC,+GAAgH,KAAMW,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,mIAAoI,KAAMiB,EAAAA,cAAoBpB,EAAYG,EAAG,KAAMiB,EAAAA,cAAoBpB,EAAYS,OAAQ,KAAM,mDAAoD,+BAAgCW,EAAAA,cAAoBpB,EAAYI,EAAG,CACzlBiB,KAAM,2CACL,eAAgB,wBAAyB,KAAMD,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,OAAQiB,EAAAA,cAAoBpB,EAAYI,EAAG,CACpIiB,KAAM,uBACL,QAAS,KAAMD,EAAAA,cAAoBpB,EAAYI,EAAG,CACnDiB,KAAM,mDACL,sBAAuB,sBAAuB,KAAMD,EAAAA,cAAoBpB,EAAYK,GAAI,KAAM,eAAgB,KAAMe,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,mDAAoD,KAAMiB,EAAAA,cAAoBpB,EAAYY,GAAI,KAAM,KAAMQ,EAAAA,cAAoBpB,EAAYW,GAAI,KAAM,KAAMS,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,6BAA8BiB,EAAAA,cAAoBpB,EAAYI,EAAG,CAClaiB,KAAM,qEACL,YAAa,6BAA8BD,EAAAA,cAAoBpB,EAAYI,EAAG,CAC/EiB,KAAM,4CACL,aAAc,4DAA6D,MAAO,KAAMD,EAAAA,cAAoBpB,EAAYW,GAAI,KAAM,KAAMS,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,8JAA+J,MAAO,KAAMiB,EAAAA,cAAoBpB,EAAYW,GAAI,KAAM,KAAMS,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,oIAAqI,MAAO,KAAMiB,EAAAA,cAAoBpB,EAAYW,GAAI,KAAM,KAAMS,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,2SAA4S,MAAO,MAAO,KAAMiB,EAAAA,cAAoBpB,EAAYK,GAAI,KAAM,mCAAoC,KAAMe,EAAAA,cAAoBpB,EAAYM,GAAI,KAAM,uBAAwB,KAAMc,EAAAA,cAAoBpB,EAAYU,GAAI,KAAM,KAAMU,EAAAA,cAAoBpB,EAAYW,GAAI,KAAM,KAAMS,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,qDAAsDiB,EAAAA,cAAoBpB,EAAYI,EAAG,CACh2CiB,KAAM,6BACL,kBAAmB,KAAMD,EAAAA,cAAoBpB,EAAYI,EAAG,CAC7DiB,KAAM,6BACL,iBAAkB,2EAA4E,MAAO,KAAMD,EAAAA,cAAoBpB,EAAYW,GAAI,KAAM,KAAMS,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,gDAAiDiB,EAAAA,cAAoBpB,EAAYI,EAAG,CACzRiB,KAAM,0BACL,QAAS,IAAKD,EAAAA,cAAoBpB,EAAYI,EAAG,CAClDiB,KAAM,iCACL,OAAQ,qBAAsB,MAAO,KAAMD,EAAAA,cAAoBpB,EAAYW,GAAI,KAAM,KAAMS,EAAAA,cAAoBpB,EAAYG,EAAG,KAAMiB,EAAAA,cAAoBpB,EAAYI,EAAG,CACxKiB,KAAM,qEACL,aAAc,qFAAsF,MAAO,MAAO,KAAMD,EAAAA,cAAoBpB,EAAYM,GAAI,KAAM,iBAAkB,KAAMc,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,mCAAoC,KAAMiB,EAAAA,cAAoBpB,EAAYY,GAAI,KAAM,KAAMQ,EAAAA,cAAoBpB,EAAYW,GAAI,KAAM,KAAMS,EAAAA,cAAoBpB,EAAYG,EAAG,KAAMiB,EAAAA,cAAoBpB,EAAYI,EAAG,CAC1biB,KAAM,6CACL,SAAU,IAAKD,EAAAA,cAAoB,MAAO,8GAA+G,MAAO,KAAMA,EAAAA,cAAoBpB,EAAYW,GAAI,KAAM,KAAMS,EAAAA,cAAoBpB,EAAYG,EAAG,KAAMiB,EAAAA,cAAoBpB,EAAYI,EAAG,CACnSiB,KAAM,oCACL,UAAW,IAAKD,EAAAA,cAAoB,MAAO,wDAAyD,MAAO,KAAMA,EAAAA,cAAoBpB,EAAYW,GAAI,KAAM,KAAMS,EAAAA,cAAoBpB,EAAYG,EAAG,KAAMiB,EAAAA,cAAoBpB,EAAYI,EAAG,CAC9OiB,KAAM,oCACL,WAAY,IAAKD,EAAAA,cAAoB,MAAO,oCAAqC,MAAO,KAAMA,EAAAA,cAAoBpB,EAAYW,GAAI,KAAM,KAAMS,EAAAA,cAAoBpB,EAAYG,EAAG,KAAMiB,EAAAA,cAAoBpB,EAAYI,EAAG,CAC3NiB,KAAM,qEACL,cAAe,IAAKD,EAAAA,cAAoB,MAAO,4BAA6B,MAAO,KAAMA,EAAAA,cAAoBpB,EAAYW,GAAI,KAAM,KAAMS,EAAAA,cAAoBpB,EAAYG,EAAG,KAAMiB,EAAAA,cAAoBpB,EAAYI,EAAG,CACtNiB,KAAM,kCACL,UAAW,IAAKD,EAAAA,cAAoB,MAAO,oEAAqE,MAAO,MAAO,KAAMA,EAAAA,cAAoBpB,EAAYK,GAAI,KAAM,SAAU,KAAMe,EAAAA,cAAoBpB,EAAYY,GAAI,KAAM,KAAMQ,EAAAA,cAAoBpB,EAAYW,GAAI,KAAM,KAAMS,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,QAASiB,EAAAA,cAAoBpB,EAAYS,OAAQ,KAAM,WAAY,KAAMW,EAAAA,cAAoBpB,EAAYS,OAAQ,KAAM,UAAW,iBAAkBW,EAAAA,cAAoBpB,EAAYS,OAAQ,KAAM,4BAA6B,aAAc,MAAO,KAAMW,EAAAA,cAAoBpB,EAAYW,GAAI,KAAM,KAAMS,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,2CAA4CiB,EAAAA,cAAoBpB,EAAYS,OAAQ,KAAM,oBAAqB,QAAS,MAAO,KAAMW,EAAAA,cAAoBpB,EAAYW,GAAI,KAAM,KAAMS,EAAAA,cAAoBpB,EAAYG,EAAG,KAAM,aAAciB,EAAAA,cAAoBpB,EAAYI,EAAG,CAC16BiB,KAAM,yEACL,YAAa,mCAAoCD,EAAAA,cAAoBpB,EAAYS,OAAQ,KAAM,sDAAuD,YAAaW,EAAAA,cAAoB,OAAQ,MAAO,MAAO,KAAMA,EAAAA,cAAoBpB,EAAYG,EAAG,KAAMiB,EAAAA,cAAoBpB,EAAYS,OAAQ,KAAM,sBAAuB,KAAMW,EAAAA,cAAoB,MAAO,KAAMA,EAAAA,cAAoB,MAAO,KAAMA,EAAAA,cAAoB,MAAO,KAAMA,EAAAA,cAAoB,MAAO,KAAMA,EAAAA,cAAoBL,EAAQ,CACxeQ,MAAO,yBACPC,KAAM,MACNC,YAAa,UACbC,KAAM,eAEV,CAKA,MAJA,SAAoB3B,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,IAAgB4B,EAAa1B,OAAOC,OAAO,CAAC,GAAGW,EAAAA,EAAAA,MAAsBd,EAAMe,YAApEc,QACP,OAAOD,EAAYP,EAAAA,cAAoBO,EAAW5B,EAAOqB,EAAAA,cAAoBtB,EAAmBC,IAAUD,EAAkBC,EAC9H,E,cCnFe,SAAS8B,EAAiB9B,GACvC,OAAOqB,EAAAA,cAAoBU,EAAAA,EAAe/B,EAAOqB,EAAAA,cAAoBW,EAAqBhC,GAC5F,CAHA+B,EAAAA,C","sources":["webpack://my/./content/posts/start-your-clojure-now-2/index.mdx","webpack://my/./src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    strong: \"strong\",\n    ol: \"ol\",\n    li: \"li\",\n    ul: \"ul\"\n  }, _provideComponents(), props.components), {Author} = _components;\n  if (!Author) _missingMdxReference(\"Author\", true);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://freshcodeit.com/how-to-stop-being-afraid-of-clojure\"\n  }, \"다음글\"), \"을 번역했습니다.\"), \"\\n\", React.createElement(_components.h2, null, \"3. 클로저의 여러 모습\"), \"\\n\", React.createElement(_components.p, null, \"클로저는 단지 \", React.createElement(_components.a, {\n    href: \"https://freshcodeit.com/services/web-development\"\n  }, \"웹\"), \"이나 \", React.createElement(_components.a, {\n    href: \"https://freshcodeit.com/services/mobile-development\"\n  }, \"모바일 개발\"), \" 뿐만 아니라, 데이터 사이언스와 DL/ML(\", React.createElement(_components.a, {\n    href: \"https://github.com/incanter/incanter\"\n  }, \"incanter\"), \", \", React.createElement(_components.a, {\n    href: \"https://github.com/scicloj\"\n  }, \"scicloj\"), \")에도 활발히 활용되고 있습니다.\"), \"\\n\", React.createElement(_components.p, null, \"아직 개인적으로 이 분야의 일을 경험하진 못했습니다. 하지만 DSL의 경험은, 클로저의 우아함을 다시금 느껴볼 수 있게 해줬습니다.\"), \"\\n\", React.createElement(_components.h3, null, \"3.1 DSL (domain specific language)\"), \"\\n\", React.createElement(_components.p, null, \"도메인 특화 언어는 특정한 문제를 풀기 위한 한 단계 더 추상회된 언어입니다. 클로저에서 DSL은 주로 데이터 구조로 표현됩니다. 아래의 \", React.createElement(_components.a, {\n    href: \"https://github.com/seancorfield/honeysql\"\n  }, \"honeysql\"), \" 예제를 볼까요.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-clojure\"\n  }, \"{:select [:a :b :c]\\n :from   [:foo]\\n :where  [:= :f.a \\\"baz\\\"]}\\n\")), \"\\n\", React.createElement(_components.p, null, \"이처럼 컨텍스트에 구애받지 않는 문법은 DSL를 커스터마이즈 할 수 있도록 합니다.\"), \"\\n\", React.createElement(_components.p, null, \"좀 더 현실적인 예를 들어보겠습니다. 언젠가 \", React.createElement(_components.a, {\n    href: \"https://demo.searchkit.co/\"\n  }, \"searchkit\"), \"과 비슷한 GUI 필터링 모드를 만들어야 했었는데요, SQL 과 복잡한 논리 표현을 이용해서 GUI 필터를 확장하는 것이 요구사항이었습니다.\"), \"\\n\", React.createElement(_components.p, null, \"이전 GUI 에서의 필터 조건은 오직 AND만 쓰거나 OR만 쓰거나 둘 중 하나였기 때문에, 그 둘을 동시에 사용하거나 다시 그룹핑 하는 것이 불가능했습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-clojure\"\n  }, \"condition_1 AND (condition_2 OR condition_3)\\n\")), \"\\n\", React.createElement(_components.p, null, \"문제는 \", React.createElement(_components.a, {\n    href: \"https://www.elastic.co/guide/en/elasticsearch/reference/current/xpack-sql.html\"\n  }, \"ElasticSearch SQL JDBC\"), \" driver가 SQL 쿼리들을 올바른 ElasticSearch 쿼리에 맵핑하지 않는 것에 있었습니다.\"), \"\\n\", React.createElement(_components.p, null, \"팀 내부에선 SQL 쿼리를 파싱해서 그와 동형인(isomorphic) Elasticsearch 쿼리로 바꾸는 일을 진행해야 했습니다. 동시에 컨텍스트에 기반해 에러 하이라이팅과 쿼리 요소들을 자동완성해주는 (예약어와 식별자 등) 기능을 구현하는 것도 필요했고요.\"), \"\\n\", React.createElement(_components.p, null, \"예를 들어, 사용 가능한 컬럼들을 드랍다운으로 모아서 보여주거나, BETWEEN 과 같은 오퍼레이터를 숫자 필드에서 사용할 수 있도록 하는 일들이 전부 일의 범주에 포함되었습니다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://freshcodeit.com/services/clojure-development-company\"\n  }, \"클로저는 이 작업에 완벽히 적합\"), \"한 언어였습니다. \", React.createElement(_components.strong, null, \"클로저의 동형성(homoiconicity)와 데이터 지향 접근이 바로 해결\"), \"이었죠. 다시 한번 구현해야하는 개념을 집어보면,\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"SQL 문자를 추상 구문 트리로 바꿈 (AST, abstract syntax tree)\"), \"\\n\", React.createElement(_components.li, null, \"AST를 ElasticSearch 쿼리로 바꿈\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"첫 번째 단계에선 Instaparse 라이브러리(\", React.createElement(_components.a, {\n    href: \"https://github.com/Engelberg/instaparse\"\n  }, \"instaparse\"), \")가 쓰였습니다.\"), \"\\n\", React.createElement(_components.p, null, \"컨텍스트에 구애받지 않는 문법인 Backus-Naur 형태(BNF) 표현을 실행 가능한 파서로 바꾸는 데 쓰이는 라이브러리로, 문자열을 입력받아 AST를 중첩된 클로저 컬렉션의 형태로 출력하는 역할을 합니다.\"), \"\\n\", React.createElement(_components.p, null, \"결과로 받은 파스 트리의 모든 노드는 자동 완성 기능에 필요한 유용한 메타데이터 정보를 포함하고 있습니다. (라인에 맵핑되거나 인풋 문자의 컬럼에 해당하는) 또한 Instaparse는 파싱 실패에 대한 자세한 정보를 줄과 에러 구문의 컬럼등에 대해서 제공합니다.\"), \"\\n\", React.createElement(_components.p, null, \"두번째 스테이지는 AST를 순회하며 각각에 패턴 매칭을 적용하며 구현될 수 있습니다.\\n\", React.createElement(_components.a, {\n    href: \"https://gist.github.com/idozorenko/a0c5bb5e5d38a5ba92cca7f43d1d3392\"\n  }, \"여기\"), \" 이 접근에 대한 간략한 요약이 있는데요, 위의 케이스와 우리가 한 구현이 다른 점은, 우리는 수학적 AST 표현을 바로 클로저 코드로 바꿔 평가(evaluation)까지 해버렸다는 점입니다.\"), \"\\n\", React.createElement(_components.h3, null, \"3.2 클로저스크립트\"), \"\\n\", React.createElement(_components.p, null, \"지금 현재는 자바스크립트가 브라우저, 그리고 많은 모바일 기기에서 가장 우세를 점하고 있는 언어입니다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://clojurescript.org/\"\n  }, \"클로저스크립트\"), \"는 \", React.createElement(_components.strong, null, \"클로저를 자바스크립트로 변환시켜주는 컴파일러를 포함\"), \"합니다. 내부에서 구글의 Closure 도구들과 minification 컴파일러를 사용하는데요, ClojureScript는 컴파일러 말고 그 언어 자체를 의미하기도 합니다. (줄여서 cljs)\"), \"\\n\", React.createElement(_components.p, null, \"cljs는 클로저의 모든 장점 - 데이터 구조, 함수형 접근, 매크로 등등 - 을 전부 포함함과 동시에, 언제든 프로덕션에 사용 가능한 생태계와 라이브러리들을 제공합니다. 클로저와는 플랫폼 레벨의 차이밖에 느껴지지 않는 셈이죠.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"클로져 백엔드 + cljs 프론트엔드를 사용하면 한 언어와 공유된 모드로 풀스택 개발\"), \"이 가능합니다! npm 패키징과의 매끄러운 연결도 \", React.createElement(_components.a, {\n    href: \"https://github.com/thheller/shadow-cljs\"\n  }, \"shadow-cljs\"), \" 컴파일러를 통해 구현되어 있습니다.\"), \"\\n\", React.createElement(_components.p, null, \"그리고 \", React.createElement(_components.a, {\n    href: \"https://cljsrn.org/\"\n  }, \"cljs\"), \"는 \", React.createElement(_components.a, {\n    href: \"https://freshcodeit.com/portfolio-cases/tipster\"\n  }, \"React Native 모바일 앱\"), \"을 만들 때 쓰일 수도 있습니다.\"), \"\\n\", React.createElement(_components.h2, null, \"4. ... 단점들?\"), \"\\n\", React.createElement(_components.p, null, \"다른 어떤 기술과 마찬가지로, 클로저도 수많은 장점에 대한 트레이드 오프가 있습니다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"클로저의 영속 자료 구조는 자바의 그것에 비해 \", React.createElement(_components.a, {\n    href: \"http://www.diva-portal.org/smash/get/diva2:1424342/FULLTEXT01.pdf\"\n  }, \"약간 덜 효율적\"), \"입니다. 성능을 향상하기 위한 팁들 - 벡터의 \", React.createElement(_components.a, {\n    href: \"https://clojure.org/reference/transients\"\n  }, \"transient\"), \" 버전을 사용한 백터, 맵, 셋을 사용한다거나 - 이 있지만, 동시 접근이 필요할 경우엔 지양됩니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"클로저는 호스트 플랫폼의 기능을 전부 사용할 수 있지만(자바 라이브러리들과 데이터 구조들), 통상적으로 동일한 자바나 스칼라 코드보다 약간 느립니다. 대부분의 애플리케이션에 대해서는 미미한 차이겠지만, 정말 높은 성능을 요구하는 시스템이나 모듈에 적용할 때는 신중해야 합니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"클로저는 또한 초심자에게 그리 배우기 쉬운 언어는 아닙니다. 하지만 대부분은 함수형 접근 때문에 어려운 것이 아니라 호스팅 플랫폼과의 상호작용 부분을 어려워 합니다. 시간을 갖고, 연습을 하다 보면 별 문제가 아니게 될 것입니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"모든 걸 고려해 보았을 때, 제 생각에 가장 심각한 클로저의 단점은 '마케팅' 입니다. 클로저는 최소한의 문법과, 잘 짜여진 생태계, 그리고 높은 잠재성을 가진 단순한 언어입니다. 클로저를 알기 전과 후는 명백히 다를 것입니다!\\n하지만 리습으로 부터 물려받은 과도한 복잡성과 부족한 표준 등의 클로저가 갖고 있는 '대중적 이미지' 는 실제로는 완전 반대임에도 불구하고 새로 유입된 개발자들로 하여금 클로저(혹은 클로저스크립트)에 투자하기를 꺼리게 만듭니다. 클로저를 마스터함으로써 얻을 수 있는 이득이 훨씬 큼에도 불구하고요!\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"5. 뉴비를 위한 팁: 클로저, 어떻게 시작하면 좋을까?\"), \"\\n\", React.createElement(_components.h3, null, \"5.1 클로저 마스터의 세가지 원칙\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"연습하세요. 모든 기술에 통용되는 조언입니다. 만약 함수형 프로그래밍을 막 시작하셨다면, \", React.createElement(_components.a, {\n    href: \"https://adventofcode.com/\"\n  }, \"Advent of Code\"), \"나 \", React.createElement(_components.a, {\n    href: \"https://projecteuler.net/\"\n  }, \"Project Euler\"), \"들을 풀면서 언어에 대한 감각을 익히셔야 합니다. 저는 몇 개의 사이드 프로젝트에 클로저를 적용해보며 실력이 부쩍 늘었었습니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"다른 사람들에게 배우세요. 커뮤니티나 클로저/리습 관련 서적을 참고하세요. 정말 \", React.createElement(_components.a, {\n    href: \"http://landoflisp.com/\"\n  }, \"재미있고\"), \" \", React.createElement(_components.a, {\n    href: \"https://www.braveclojure.com/\"\n  }, \"훌륭한\"), \" 자료들을 찾으실 수 있습니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://awesomeopensource.com/project/tallesl/Rich-Hickey-fanclub\"\n  }, \"리치 히키의 발표\"), \"를 들으세요. 클로저 기능과 기술 솔루션들을 언어 창시자에게서 직접 명료하고 단순한 표현으로 들을 수 있습니다. 클로저리안들의 영감의 원천입니다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"5.2 도움이 되는 링크\"), \"\\n\", React.createElement(_components.p, null, \"Clojure-how-to와 튜토리얼 링크를 공유합니다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://clojurians.slack.com/ssb/redirect\"\n  }, \"클로저리안\"), \" \", React.createElement(\"br\"), \"\\n슬랙 Clojure 채널입니다. 초보자들을 위한 섹션 (beginners, clojure, clojurescript)과\\n구직에 대한 정보(jobs, remote-jobs)도 제공합니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://www.reddit.com/r/Clojure\"\n  }, \"클로저 레딧\"), \" \", React.createElement(\"br\"), \"\\n레딧의 클로저 하위 게시판입니다. 각종 발표와 라이브러리, 강의에 대한 정보가 공유됩니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://www.clojure-toolbox.com/\"\n  }, \"클로저 툴박스\"), \" \", React.createElement(\"br\"), \"\\n최신의 클로저-클로저스크립트 라이브러리들의 모음입니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://awesomeopensource.com/project/tallesl/Rich-Hickey-fanclub\"\n  }, \"리치 히키의 팬클럽\"), \" \", React.createElement(\"br\"), \"\\n리치 히키의 강연과 인터뷰 모음집입니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://jobs.braveclojure.com/\"\n  }, \"클로저 잡스\"), \" \", React.createElement(\"br\"), \"\\n클로저 구루가 되실 분들을(이미 되신 분들도 포함해서!) 위한 실질적으로 클로저를\\n사용하는 구직 리스트입니다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"6. 요약\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"클로저는 \", React.createElement(_components.strong, null, \"풀스택 웹개발\"), \"과 \", React.createElement(_components.strong, null, \"모바일 개발\"), \"을 위한 언어임과 동시에 \", React.createElement(_components.strong, null, \"데이터 사이언스, 스크립팅과 DSL에도 적용\"), \"될 수 있습니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"클로저는 성능과 재미를 둘 다 잡고자 하는 초보 혹은 숙련된 프로그래머 \", React.createElement(_components.strong, null, \"모두에게 매력적인 함수형 언어\"), \"입니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"리습의 방언으로, \", React.createElement(_components.a, {\n    href: \"https://freshcodeit.com/freshcode-post/clojure-development-challenges\"\n  }, \"도전을 좋아하는\"), \" 재능있는 개발자들에게 인기 있습니다. 하지만 궁극적으로 \", React.createElement(_components.strong, null, \"클로저는 개발을 단순화하는데 목적을 두고 만들어졌고, 제 생각엔 정말 완벽하게 목적을 달성\"), \"하고 있습니다! \", React.createElement(\"br\")), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"클로저, 지금 바로 시작하시죠!\")), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"hr\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(Author, {\n    email: \"tlonist.sang@gmail.com\",\n    name: \"김상현\",\n    description: \"백엔드 개발자\",\n    date: \"2021-06-01\"\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/Users/namenu/green/tech-blog/content/posts/start-your-clojure-now-2/index.mdx\";\nimport PostComponent from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nvar query = \"2231403947\";\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","h2","h3","pre","code","strong","ol","li","ul","_provideComponents","components","Author","id","component","Error","_missingMdxReference","React","href","className","email","name","description","date","MDXLayout","wrapper","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}